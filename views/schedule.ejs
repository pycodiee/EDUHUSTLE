<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Class Schedule</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold mb-8">Class Schedule</h1>

        <!-- Add Class Form -->
        <div class="bg-white rounded-lg shadow-md p-6 mb-8">
            <h2 class="text-xl font-semibold mb-4">Add New Class</h2>
            <form id="scheduleForm" class="space-y-4">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Class Name</label>
                        <input type="text" name="className" required 
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Instructor</label>
                        <input type="text" name="instructor" required 
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Date</label>
                        <input type="date" name="date" required 
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Start Time</label>
                        <input type="time" name="startTime" required 
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">End Time</label>
                        <input type="time" name="endTime" required 
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Room Number</label>
                        <input type="text" name="roomNumber" required 
                               class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700">Notes</label>
                    <textarea name="notes" rows="3" 
                              class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"></textarea>
                </div>
                <button type="submit" 
                        class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700">
                    Add Class
                </button>
            </form>
        </div>

        <!-- Schedule List -->
        <div class="bg-white rounded-lg shadow-md p-6">
            <h2 class="text-xl font-semibold mb-4">Your Schedule</h2>
            <div id="scheduleList" class="space-y-4">
                <!-- Will be populated dynamically -->
            </div>
        </div>
    </div>

    <script>
        // Load existing schedule when page loads
        document.addEventListener('DOMContentLoaded', loadSchedule);

        // Handle form submission
        document.getElementById('scheduleForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const data = {
                className: formData.get('className'),
                instructor: formData.get('instructor'),
                date: formData.get('date'),
                startTime: formData.get('startTime'),
                endTime: formData.get('endTime'),
                roomNumber: formData.get('roomNumber'),
                notes: formData.get('notes')
            };
            
            try {
                const response = await fetch('/api/schedule/add', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    alert(result.message);
                    e.target.reset();
                    await loadSchedule(); // Immediately reload the schedule list
                } else {
                    alert(result.error || 'Error adding class');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error adding class');
            }
        });

        // Function to load schedule
        async function loadSchedule() {
            try {
                const response = await fetch('/api/schedule');
                const schedules = await response.json();
                
                const scheduleList = document.getElementById('scheduleList');
                scheduleList.innerHTML = ''; // Clear existing content
                
                if (schedules.length === 0) {
                    scheduleList.innerHTML = `
                        <div class="text-gray-500 text-center py-4">
                            No classes scheduled yet
                        </div>
                    `;
                    return;
                }
                
                // Group schedules by date
                const schedulesByDate = groupByDate(schedules);
                
                // Sort dates in ascending order
                const sortedDates = Object.keys(schedulesByDate).sort();
                
                // Create schedule cards for each date
                sortedDates.forEach(date => {
                    const classes = schedulesByDate[date];
                    const dateSection = document.createElement('div');
                    dateSection.className = 'mb-6';
                    dateSection.innerHTML = `
                        <h3 class="text-lg font-medium text-gray-800 mb-3">${formatDate(date)}</h3>
                        <div class="space-y-3">
                            ${classes.map(schedule => `
                                <div class="bg-gray-50 rounded-lg p-4 flex justify-between items-start">
                                    <div>
                                        <h4 class="font-medium text-gray-900">${schedule.class_name}</h4>
                                        <p class="text-sm text-gray-600">Instructor: ${schedule.instructor}</p>
                                        <p class="text-sm text-gray-600">
                                            Time: ${formatTime(schedule.start_time)} - ${formatTime(schedule.end_time)}
                                        </p>
                                        <p class="text-sm text-gray-600">Room: ${schedule.room_number}</p>
                                        ${schedule.notes ? `<p class="text-sm text-gray-500 mt-2">${schedule.notes}</p>` : ''}
                                    </div>
                                    <button onclick="deleteSchedule(${schedule.id})" 
                                            class="text-red-600 hover:text-red-800 transition-colors">
                                        Delete
                                    </button>
                                </div>
                            `).join('')}
                        </div>
                    `;
                    scheduleList.appendChild(dateSection);
                });
            } catch (error) {
                console.error('Error loading schedule:', error);
                alert('Error loading schedule');
            }
        }

        // Function to delete schedule
        async function deleteSchedule(id) {
            if (!confirm('Are you sure you want to delete this class?')) {
                return;
            }
            
            try {
                const response = await fetch(`/api/schedule/${id}`, {
                    method: 'DELETE'
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    alert(result.message);
                    await loadSchedule(); // Reload the schedule list immediately
                } else {
                    alert(result.error || 'Error deleting class');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error deleting class');
            }
        }

        // Helper function to group schedules by date
        function groupByDate(schedules) {
            return schedules.reduce((groups, schedule) => {
                const date = schedule.date.split('T')[0];
                if (!groups[date]) {
                    groups[date] = [];
                }
                groups[date].push(schedule);
                return groups;
            }, {});
        }

        // Helper function to format date
        function formatDate(dateString) {
            return new Date(dateString).toLocaleDateString('en-US', {
                weekday: 'long',
                year: 'numeric',
                month: 'long',
                day: 'numeric'
            });
        }

        // Helper function to format time
        function formatTime(timeString) {
            return new Date(`2000-01-01T${timeString}`).toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit'
            });
        }
    </script>
</body>
</html> 